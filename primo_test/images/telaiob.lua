-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["telaiob"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   254.5, -14  ,  246.5, 11  ,  194.5, -6  ,  251.5, -16  ,  253.5, -16  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   252.5, 4  ,  256.5, -14  ,  261.5, -7  ,  260.5, 0  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -194.5, -7  ,  -255.5, 5  ,  -257.5, 5  ,  -260.5, 2  ,  -251.5, -14  ,  -235.5, -22  ,  -200.5, -24  ,  -193.5, -24  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   241.5, -23  ,  246.5, -19  ,  194.5, -6  ,  195.5, -24  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   251.5, -16  ,  194.5, -6  ,  246.5, -19  ,  250.5, -18  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   206.5, 25  ,  242.5, 16  ,  229.5, 26  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -259.5, -7  ,  -251.5, -14  ,  -260.5, 2  ,  -261.5, -2  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   246.5, 11  ,  254.5, -14  ,  256.5, -14  ,  252.5, 4  ,  250.5, 8  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -229.5, 22  ,  -241.5, 18  ,  -255.5, 5  ,  -194.5, 25  ,  -212.5, 26  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -241.5, 18  ,  -229.5, 22  ,  -238.5, 20  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   153.5, 24  ,  158.5, -7  ,  194.5, -6  ,  246.5, 11  ,  242.5, 16  ,  206.5, 25  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -255.5, 5  ,  -241.5, 18  ,  -243.5, 18  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   84.5, 26  ,  59.5, 24  ,  158.5, -7  ,  153.5, 24  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   27.5, 24  ,  115.5, -7  ,  158.5, -7  ,  59.5, 24  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -194.5, 25  ,  -255.5, 5  ,  -194.5, -7  ,  -158.5, -7  ,  -131.5, -6  ,  -141.5, 25  ,  -174.5, 27  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -131.5, -6  ,  -110.5, -8  ,  -82.5, -7  ,  -68.5, 25  ,  -103.5, 26  ,  -141.5, 25  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -82.5, -7  ,  -8.5, 24  ,  -68.5, 25  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -82.5, -7  ,  -67.5, -7  ,  27.5, 24  ,  -8.5, 24  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -39.5, -8  ,  39.5, -8  ,  67.5, -7  ,  27.5, 24  ,  -67.5, -7  }
                    }
                     ,
                    {
                    pe_fixture_id = "telaiob", density = 0, friction = 0, bounce = 0, isSensor=true, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   90.5, -8  ,  115.5, -7  ,  27.5, 24  ,  67.5, -7  }
                    }
                    
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

